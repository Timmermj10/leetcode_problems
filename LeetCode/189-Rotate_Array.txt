Leetcode 26 - Remove Duplicates from Sorted Array

    Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

    Example 1:
        Input: nums = [1,2,3,4,5,6,7], k = 3
        Output: [5,6,7,1,2,3,4]
        Explanation:
        rotate 1 steps to the right: [7,1,2,3,4,5,6]
        rotate 2 steps to the right: [6,7,1,2,3,4,5]
        rotate 3 steps to the right: [5,6,7,1,2,3,4]

    Example 2:
        Input: nums = [-1,-100,3,99], k = 2
        Output: [3,99,-1,-100]
        Explanation: 
        rotate 1 steps to the right: [99,-1,-100,3]
        rotate 2 steps to the right: [3,99,-1,-100]

    Initial thoughts:
    Don't have to do it in-place
    Can make a second vector, grab the last k elements, and then grab the first len - k elements and put them into the new vector

    First Solution:
    void rotate(vector<int>& nums, int k) {
        vector<int> output;

        int length = nums.size();
        int split = length - (k % length);

        if (length > 1)
        {
            for (int i = split; i < length; ++i)
            {
                output.push_back(nums[i]);
            }

            for (int i = 0; i < split; ++i) 
            {
                output.push_back(nums[i]);  
            }
            nums = output;
        }
    }

    Very good on time, but not done in-place, so bad on time

    Time limit exceeded on this solution:
    void rotate(vector<int>& nums, int k) {
        vector<int> output;

        int length = nums.size();
        int split = length - (k % length);

        if (length > 1)
        {
            for (int i = length - 1; i >= split; --i)
            {
                nums.insert(nums.begin(), nums[length - 1]);
                nums.pop_back();
            }
        }
    }

    Just taking the back element and moving it to the front untit the split element

    Cool solution that reverses the whole vector
    Then reverses the first part of the vector up until the k value
    Then reverses the second part of the vector from the k value to the end

    void reverse(vector<int>& nums, int start, int end) {
        while (end > start)
        {
            int temp = nums[start];
            nums[start++] = nums[end];
            nums[end--] = temp;
        }
    }


    void rotate(vector<int>& nums, int k) {
        vector<int> output;

        int length = nums.size();
        int split = (k % length);

        reverse(nums, 0, length - 1);
        reverse(nums, 0, split - 1);
        reverse(nums, split, length - 1);
    }

    Neat cyclical rotation approach:
    void rotate(vector<int>& nums, int k) {
        int length = nums.size();
        int split = (k % length);

        int start = 0;
        int count = 0;
        while (count < length) {
            // Pointer to current value + previous value
            int current = start;
            int prev = nums[start];
            while (1) {
                int next = (current + split) % length;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count += 1;

                if (start == current) {
                    break;
                }
            }
            start += 1;
        }
    }


    Moves the start element over by k%n elements, and continue this until you reach the end of the vector