Leetcode 27 - Remove element

    Integer array (nums)
    Integer (val)

    Remove all occurences of val in nums in-place (can't create a new array to put the values into)

    Return the size of nums (k) after removing all instances of val

    Could create an additional array, copy all values that are not val over, and copy those values back into nums
    
    First solution:
    int removeElement(vector<int>& nums, int val) {
        vector<int> nums2;

        // Find all values that aren't equal to val
        for (int i = 0; i < nums.size(); ++i) 
        {
            int curr = nums[i];
            if (curr != val) 
            {
                nums2.push_back(curr);
            }
        }

        // Copy the values back over to nums
        for (int i = 0; i < nums2.size(); ++i)
        {
            nums[i] = nums2[i];
        }

        // Return the size of the array after instances of val have been removed
        return nums2.size();
    }

    Beats 100% on runtime, only 37.75% on space

    Now for the solution without using extra space

    First try:
    int removeElement(vector<int>& nums, int val) {
        int i = 0;
        // Find all values that aren't equal to val
        for (int j = 0; j < nums.size(); ++j) 
        {
            int curr = nums[j];
            if (curr != val) 
            {
                nums[i++] = nums[j];
            }
        }
        // Return the size of the array after instances of val have been removed
        return i;
    }

    Second try:
    int removeElement(vector<int>& nums, int val) {
        int i = 0;
        int n = nums.size();

        // Find all values that aren't equal to val
        while (i < n) 
        {
            if (nums[i] == val) 
            {
                // Swap the current instance of val with the last element
                nums[i] = nums[n - 1];
                // Decrement n to make sure we don't look at this instance again
                n--;
            }
            else 
            {
                i++;
            }
        }
        // Return the size of the array after instances of val have been removed
        return n;
    }

    The second try is more time efficent because it doesn't move elements that aren't equal to the value, only those that are equal to the value
    So if there are few instances of val in the array, there will be very few assignments. 


    Here is a complete outline of the correct solution
    // Set a pointer to the first value in the array
    // Set a int to be the size of the array
    // Iterate until you reach the int (size of the array)
    // If nums[pointer] == val, swap nums[pointer] with nums[end of array]
    // Decrease the size of the array
    // Otherwise continue to the next element
    // Return the size of the array (equal to the number of elements that are not equal to val)
    